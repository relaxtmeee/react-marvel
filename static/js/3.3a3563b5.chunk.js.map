{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelServices.js","hooks/http.hook.js","components/errorBoundary/ErrorBoundary.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","name","getCharacter","id","getAllComics","_transformComics","getComic","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","ErrorBoundary","props","children","View","imgStyle","className","target","href","RandomChar","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","charlist","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","imgClassName","to","resourceURI","match","CharInfo","charId","skeleton","MainPage","selectedChar","setSelectedChar","decoration"],"mappings":"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","file":"static/js/3.3a3563b5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\"\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{display: \"block\", width: \"250px\", height: \"250px\", objectFit: \"contain\", margin: \"0 auto\"}} src={img} alt=\"error\"/>\n    )\n    \n}\n\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const { loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=9ae4aad6775132924cbe488a353b2673';\n    const _baseOffset = 0;\n\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return await res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res =  await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n      const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n    \n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension, \n            homepage: char.urls[0].url, \n            wiki: char.urls[1].url,\n            comics: char.comics.items \n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects.language || 'en-us',\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic}\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\n            }\n\n            const data = await response.json();    \n\n            setLoading(false);\n\n            return data;\n\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => {\n        setError(null);\n    }, [])\n    \n    return {loading, request, error, clearError};\n\n}","import { useState } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nconst ErrorBoundary = (props) => {\n\n    const [error, setError] = useState(false);\n\n    function componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        setError(true);\n    }\n    \n  \n    if (error) {\n        return <ErrorMessage/>\n    }\n    return props.children;\n    \n}\n\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelServices';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} =  useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a target=\"_blank\" href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a target=\"_blank\" href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar","import {useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelServices';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [charEnded, setCharEnded] = useState(false);\n\n  \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList(charlist => [...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n    \n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n \n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                    if (e.key === ' ' || e.key === \"Enter\") {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n};\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelServices';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\nimport { NavLink } from 'react-router-dom';\n\n\n const CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const { loading, error, getCharacter, clearError} = useMarvelService();\n\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if(!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n        \n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n\n    const skeleton = char || loading || error ? null : <Skeleton/>\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n\n    \n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    const imgClassName = thumbnail != \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ? \"\" : \"dont\";\n    \n    return (\n        <>\n            <div className=\"char__basics\">\n                    <img src={thumbnail} alt={name} className={imgClassName}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a target=\"_blank\" href={homepage} className=\"button button__main\" >\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a target=\"_blank\" href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {\n                        comics.length > 0 ? null : 'There is no comics with this character'\n                    }\n                    {\n                        comics.map((item,i) => {\n                            if (i > 9) {\n                                return;\n                            }\n                            return (\n                                <li key ={i} className=\"char__comics-item\">\n                                    <NavLink target='_blank' to={`/comics/${item.resourceURI.match(/\\d*$/)[0]}`}>\n                                        {item.name}\n                                    </NavLink>\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n};\n\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { Fragment, useState } from \"react\";\n\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\"\nimport RandomChar from \"../randomChar/RandomChar\"\nimport CharList from \"../charList/CharList\"\nimport CharInfo from \"../charInfo/CharInfo\"\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n    const [selectedChar, setSelectedChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setSelectedChar(id);\n    }\n    return (\n        <>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            \n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                \n                <ErrorBoundary>\n                    <CharInfo charId={selectedChar}/>\n                </ErrorBoundary>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )   \n\n}\n\nexport default MainPage;"],"sourceRoot":""}